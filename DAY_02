📍 concept - array (common elements in three sorted array)
📌 source - gfg (https://practice.geeksforgeeks.org/problems/common-elements1132/1)

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:    
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            // 📍 approach - 1) iterate every element, do compare after incrementing 2) if all three are same store in set 3) and then return ans
            // t.c - o(n1+n2+n3) 
            // s.c - o(n1)
            vector<int>ans;
            set<int>st;
            int i,j,k;
            i=j=k=0;
            
            while(i<n1 && j<n2 && k<n3){
                if(A[i]==B[j] && B[j]==C[k]){
                    st.insert(A[i]); // in the case where multiple elements occured, set is the only ds where duplicates are not allowed 
                    i++,j++,k++;
                }
                
            
            else if(A[i]<B[j]){
                i++;
            }
            else if(B[j]<C[k]){
                j++;
            }
            else{
                k++;
            }
        }
        
        // auto keyword for identify the datatype of the set
        for(auto i:st){
            ans.push_back(i);
        }
        return ans;
        }
};

//{ Driver Code Starts.

int main ()
{
    int t; cin >> t;
    while (t--)
    {
        int n1, n2, n3; 
        cin >> n1 >> n2 >> n3;
        int A[n1];
        int B[n2];
        int C[n3];
        
        for (int i = 0; i < n1; i++) cin >> A[i];
        for (int i = 0; i < n2; i++) cin >> B[i];
        for (int i = 0; i < n3; i++) cin >> C[i];
        
        Solution ob;
        
        vector <int> res = ob.commonElements (A, B, C, n1, n2, n3);
        if (res.size () == 0) 
            cout << -1;
        for (int i = 0; i < res.size (); i++) 
            cout << res[i] << " "; 
        cout << endl;
    }
}
// } Driver Code Ends
